//*****************************************************************************
/*
 * File:   main.c
 * Author: Carlos Escobar
 * Ejemplo de implementaci?n de la comunicaci?n SPI 
 * C?digo Maestro
 * Created on 27 de Julio de 2023, 04:10 PM
 */
//*****************************************************************************
//*****************************************************************************
// Palabra de configuraci?n
//*****************************************************************************
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//*****************************************************************************
// Definici?n e importaci?n de librer?as
//*****************************************************************************
#include <xc.h>
#include <stdint.h>
#include "SPI.h"
#include "LCD.h"
//*****************************************************************************
// Definici?n de variables
uint8_t contador= 0;
int ADC_voltaje, ADC_voltaje_2,ADC_voltaje_nc, ADC_voltaje_nc2;

//VARIABLES PARA LA PANTALLA
uint8_t centenas;
uint8_t decenas;
uint8_t unidades;
uint8_t residuo;

//VARIABLES PARA LA PANTALLA
uint8_t centenas2;
uint8_t decenas2;
uint8_t unidades2;
uint8_t residuo2;

//VARIABLES PARA LA PANTALLA
uint8_t centenas3;
uint8_t decenas3;
uint8_t unidades3;
uint8_t residuo3;
//*****************************************************************************
#define _XTAL_FREQ 8000000
//*****************************************************************************
// Definici?n de funciones para que se puedan colocar despu?s del main de lo 
// contrario hay que colocarlos todas las funciones antes del main
//*****************************************************************************
void setup(void);
void displays(int num);
void displays2(int num);
void displays3(int num);
//*****************************************************************************
// C?digo Principal
//*****************************************************************************
void main(void) {
    setup();
    Lcd_Init();
    //*************************************************************************
    // Loop infinito
    //*************************************************************************
    while(1){
       
       PORTCbits.RC2 = 0;       //Slave Select
       __delay_ms(1);
       
       spiWrite(1); //ESCRIBE EL VALOR DEL PUERTO B AL ESCLAVO
       PORTD = spiRead(); //RECIBE EL VALOR DEL ESCLAVO AL PUERTO D
       ADC_voltaje_nc = PORTD;
       
       __delay_ms(1);
       PORTCbits.RC2 = 1;       //Slave Deselect 
       
       __delay_ms(250);
       
       PORTCbits.RC1 = 0;       //Slave Select
       __delay_ms(1);
       
       spiWrite(1); //ESCRIBE EL VALOR DEL PUERTO B AL ESCLAVO
       PORTB = spiRead(); //RECIBE EL VALOR DEL ESCLAVO AL PUERTO D
       ADC_voltaje_nc2= PORTB;
       
       __delay_ms(1);
       PORTCbits.RC1 = 1;       //Slave Deselect */
       
       __delay_ms(250);
       //********************************
       PORTCbits.RC2 = 0;       //Slave Select
       __delay_ms(1);
       
       spiWrite(2); //ESCRIBE EL VALOR DEL PUERTO B AL ESCLAVO
       contador= spiRead(); //RECIBE EL VALOR DEL ESCLAVO AL PUERTO D
       
       __delay_ms(1);
       PORTCbits.RC2 = 1;       //Slave Deselect 
       
       __delay_ms(250);
       
       PORTCbits.RC1 = 0;       //Slave Select
       __delay_ms(1);
       
       spiWrite(1); //ESCRIBE EL VALOR DEL PUERTO B AL ESCLAVO
       PORTB = spiRead(); //RECIBE EL VALOR DEL ESCLAVO AL PUERTO D
       
       
       __delay_ms(1);
       PORTCbits.RC1 = 1;       //Slave Deselect */
       
       __delay_ms(250);
       
        ADC_voltaje = (int)(ADC_voltaje_nc* ((float)5/255) * 100);
        displays(ADC_voltaje);
        
        ADC_voltaje_2 = (int)(ADC_voltaje_nc2* ((float)5/255) * 100);
        displays2(ADC_voltaje_2);
       
        displays3(contador);
       
        Lcd_Clear();
        /**************************************************/
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("Pot1");
        
        Lcd_Set_Cursor(2,1);
        char valor_c = centenas + '0';
        Lcd_Write_Char(valor_c);
        
        Lcd_Set_Cursor(2,2);
        Lcd_Write_Char('.');
      
        Lcd_Set_Cursor(2,3);
        char valor_d = decenas + '0';
        Lcd_Write_Char(valor_d);
        
        Lcd_Set_Cursor(2,4);
        char valor_u = unidades + '0';
        Lcd_Write_Char(valor_u);
        
        Lcd_Set_Cursor(1,6);
        Lcd_Write_String("Pot2");
        
        Lcd_Set_Cursor(2,6);
        char valor_c2 = centenas2 + '0';
        Lcd_Write_Char(valor_c2);
        
        Lcd_Set_Cursor(2,7);
        Lcd_Write_Char('.');
      
        Lcd_Set_Cursor(2,8);
        char valor_d2 = decenas2 + '0';
        Lcd_Write_Char(valor_d2);
        
        Lcd_Set_Cursor(2,9);
        char valor_u2 = unidades2 + '0';
        Lcd_Write_Char(valor_u2);
        
        Lcd_Set_Cursor(1,11);
        Lcd_Write_String("Cont");
        
        Lcd_Set_Cursor(2,11);
        char valor_c3 = centenas3 + '0';
        Lcd_Write_Char(valor_c3);
      
        Lcd_Set_Cursor(2,12);
        char valor_d3 = decenas3 + '0';
        Lcd_Write_Char(valor_d3);
        
        Lcd_Set_Cursor(2,13);
        char valor_u3 = unidades3 + '0';
        Lcd_Write_Char(valor_u3);
        
        
        
         __delay_ms(50);
         /**************************************************/
       
    }
    return;
}
//*****************************************************************************
// Funci?n de Inicializaci?n
//*****************************************************************************
void setup(void){
    ANSEL = 0;
    ANSELH = 0;
    TRISA = 0;
    TRISC2 = 0;
    TRISC1 = 0;
    TRISB = 0;
    TRISD = 0;
    TRISE = 0;
    
    PORTA = 0;
    PORTB = 0;
    PORTD = 0;
    PORTE = 0;
    PORTCbits.RC2 = 1;
    PORTCbits.RC1 = 1;
    
    //CONFIGURACI?N DEL OSCILADOR
    OSCCONbits.IRCF = 0b111; //8 Mhz
    OSCCONbits.SCS = 1; //RELOJ INTERNO
    
    spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, SPI_IDLE_2_ACTIVE);

}

void displays(int num)
{
    centenas= (uint8_t)(num/100);
    residuo = num%100;
    
    decenas = residuo /10;
    residuo = residuo % 10;
    
    unidades = residuo;
    return;
    
}
void displays2(int num)
{
    centenas2= (uint8_t)(num/100);
    residuo2 = num%100;
    
    decenas2 = residuo2 /10;
    residuo2 = residuo2 % 10;
    
    unidades2 = residuo2;
    return;
    
}

void displays3(int num)
{
    centenas3= (uint8_t)(num/100);
    residuo3 = num%100;
    
    decenas3 = residuo3 /10;
    residuo3 = residuo3 % 10;
    
    unidades3 = residuo3;
    return;
    
}
